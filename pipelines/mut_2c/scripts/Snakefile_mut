# Levi Mangarin 2017 wolchok lab
## Mutational analysis pipeline for preprocessed fastq files, calibrated for hg19 analysis

#################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
#################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

#refs for using grch37 hg19 (broad)
REF = os.path.join(REFS + "human_g1k_b37.fasta")
DBSNP = os.path.join(REFS + "dbsnp_138.b37.vcf")
DBSNP138 = os.path.join(REFS + "dbsnp_138.b37.vcf")
DBSNP138e = os.path.join(REFS + "dbsnp_138.b37.excluding_sites_after_129.vcf")
DBSNP132 = os.path.join(REFS + "dbsnp_132_b37.leftAligned.vcf")
COSMIC = os.path.join(REFS + "b37_cosmic_v54_120711.vcf")
COSMIC = os.path.join(REFS + "CosmicCodingMuts_b37.vcf")
GOLD_INDELS = os.path.join(REFS + "Mills_and_1000G_gold_standard.indels.b37.vcf")
INTERVALS= os.path.join(REFS + "Broad.human.exome.b37.interval_list")
REGION_b37="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT".split()
region=REGION_b37

# Containers
CONTAINERS=config["containers"]
PREPRO=os.path.join(CONTAINERS + "dsprepro-1.1.simg")
CUTADAPT=os.path.join(CONTAINERS + "cutadapt-1.9.1.simg")
PICARD=os.path.join(CONTAINERS + "picard-latest.simg")
MUTECT=os.path.join(CONTAINERS + "mutect-latest.simg")
HGMUT=os.path.join(CONTAINERS + "hgmut-1.0.simg")
GATK=os.path.join(CONTAINERS + "gatk-3.4.simg")

#################################################################################
rule all:
    input: 
        expand(FILE + 'strelka2/{SAMPLE}.T/results/variants/somatic.snvs.vcf.gz', SAMPLE=sample),
        expand(FILE + 'muTect/{SAMPLE}.T.vcf', SAMPLE=sample),
 
#################################################################################
# Combine readgroups
rule readgroups_bam:
    input:
        fastqrg = FILE + 'fastq/{sample}.L1.01.fastq.rg.txt', bam = FILE + "bqsr/{sample}.pp.bam", tmpdir = FILE + "tmp/", file=FILE, refs=REFS, prepro=PREPRO, picard=PICARD, scripts=SCRIPTS
    output:
        FILE + "bqsr/{sample}.pp.rg.bam"
    threads: 1
    params:
        walltime="06:00", mem="16", name="sn.rg", threads="1"
    shell:
        "module add singularity; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
        "bash -c \"java -Xmx{params.mem}g -jar /usr/picard/picard.jar AddOrReplaceReadGroups "
        "I={input.bam} "
        "O={output} "
        "TMP_DIR={input.tmpdir} "
        "RGID=$(awk \"NR==4\" {input.fastqrg}) "
        "RGLB=$(awk \"NR==8\" {input.fastqrg}) "
        "RGPL=$(awk \"NR==2\" {input.fastqrg}) "
        "RGPU=$(awk \"NR==6\" {input.fastqrg}) "
        "RGSM=$(awk \"NR==7\" {input.fastqrg}) \"; "
        "singularity exec --bind {input.file}:{input.file} {input.prepro} "
        "samtools index {output} "

#################################################################################
# Mutation calling
rule muTect:
    input:
         normal = FILE + 'bqsr/{sample}.N.pp.rg.bam', tumor = FILE + 'bqsr/{sample}.T.pp.rg.bam', file = FILE, ref = REF, intervals = INTERVALS, dbsnp = DBSNP, mutect=MUTECT, refs=REFS, scripts=SCRIPTS
    output:
         FILE + 'muTect/{sample}.T.vcf'
    threads: 1
    params:
         walltime="08:00", mem="32", name="sn.mutect", threads="1"
    shell:
        "module add singularity; "
        "TUMOR={input.tumor}; NORMAL={input.normal}; "
        "TUMOR_FIXED=${{TUMOR%%.*}}; "
        "TUMOR_FIXED=${{TUMOR_FIXED##*/}}; "
        "NORMAL_FIXED=${{NORMAL%%.*}}; "
        "NORMAL_FIXED=${{NORMAL_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.mutect} "
        " java -jar -Xmx{params.mem}G /mutect-1.1.7.jar -T MuTect "
        " --reference_sequence {input.ref} "
        " --input_file:tumor {input.tumor} "
        " --input_file:normal {input.normal} "
        " --dbsnp {input.dbsnp} "
        " -vcf {input.file}muTect/\"$TUMOR_FIXED\".T.vcf "
        " --out {input.file}muTect/\"$TUMOR_FIXED\".T.call_stats.out "
        " --coverage_file {input.file}muTect/\"$TUMOR_FIXED\".T.coverage.wig.txt "

rule muTect_rescue:
    input:
         normal = FILE + 'bqsr/{sample}.N.pp.rg.bam', tumor = FILE + 'bqsr/{sample}.T.pp.rg.bam', file = FILE, vcf = FILE + 'muTect/{sample}.T.vcf', prepro=PREPRO, scripts=SCRIPTS
    output:
         FILE + 'muTect/{sample}.rescue.T.vcf'
    threads: 1
    params:
         walltime="01:00", mem="4", name="sn.mtrescue", threads="1"
    shell:
        "TUMOR={input.tumor}; NORMAL={input.normal}; "
        "TUMOR_FIXED=${{TUMOR%%.*}}; "
        "TUMOR_FIXED=${{TUMOR_FIXED##*/}}; "
        "NORMAL_FIXED=${{NORMAL%%.*}}; "
        "NORMAL_FIXED=${{NORMAL_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.scripts}:{input.scripts} {input.prepro} "
        "python {input.scripts}/DMP_rescue.py "
        "--vcf {input.vcf} "
        "--txt {input.file}muTect/\"$TUMOR_FIXED\".T.call_stats.out"
        "--tumor_id {input.file}fastq/\"$TUMOR_FIXED\".T.01 "
        "--normal_id {input.file}fastq/\"$TUMOR_FIXED\".N.01 "
        "--out {output} "

rule strelka:
    input:
         normal = FILE + 'bqsr/{sample}.N.pp.rg.bam', tumor = FILE + 'bqsr/{sample}.T.pp.rg.bam', file = FILE, ref = REF, intervals = INTERVALS, dbsnp = DBSNP,scripts=SCRIPTS
    output:
         FILE + 'strelka/{sample}.T/results/passed.somatic.snvs.vcf'
    threads: 4
    params:
         walltime="24:00", mem="24", name="sn.strelka", threads="1"
    shell:
        'module add singularity; '
        "singularity exec --bind {input.file}:{input.file} /data/wolchok/singularity/dsprepro-1.1.simg "
        "bash -c \" "
        " \" "
        "TUMOR={input.tumor}; NORMAL={input.normal}; "
        "TUMOR_FIXED=${{TUMOR%%.*}}; "
        "TUMOR_FIXED=${{TUMOR_FIXED##*/}}; "
        "NORMAL_FIXED=${{NORMAL%%.*}}; "
        "NORMAL_FIXED=${{NORMAL_FIXED##*/}}; "
        'cd {input.file}strelka; '
        'rm -rf {input.file}strelka/\"$TUMOR_FIXED\".T/; ' 
        "cp {input.scripts}/strelka_config_bwa_default.ini {input.file}/strelka/\"$TUMOR_FIXED\".config.ini; "
        "sed -i '13s/.*/isSkipDepthFilters = 1/' $output_path/config.ini; "
        "{input.scripts}/configureStrelkaWorkflow.pl "
        "    --normal={input.normal} "
        "    --tumor={input.tumor} "
        "    --ref={input.ref} "
        "    --config={input.file}strelka/\"$TUMOR_FIXED\".config.ini "
        "    --output-dir={input.file}strelka/\"$TUMOR_FIXED\".T/; "
        "cd {input.file}strelka/\"$TUMOR_FIXED\".T/; "
        "sed -i -e 's/Filters = 0/Filters = 1/g' {input.file}strelka/\"$TUMOR_FIXED\".config.ini; "
        "sed -i -e 's/Filters = 0/Filters = 1/g' {input.file}strelka/\"$TUMOR_FIXED\".T/config/run.config.ini; "
        "make -j {threads}; "
        " \" "

################################################################################
################################################################################
## Annotation
#
#rule snpeff_muTect:
#    input:
#         tumor = FILE + 'muTect/{sample}.T.vcf', file = FILE
#    output:
#         FILE + 'muTect/{sample}.T.vcf.neo.ann'
#    threads: 1
#    params:
#         walltime="08:00", mem="24", name="sn.snpeff.mutect", threads="1"
#    shell:
#        "TUMOR={input.tumor}; "
#        "TUMOR_FIXED=${{TUMOR%$\".T.vcf\"}}; "
#        "TUMOR_FIXED=${{TUMOR_FIXED#$\"{input.file}muTect/\"}}; "
#        "cd {input.file}muTect; "
#        "grep \"PASS\|ALT\" \"$TUMOR_FIXED\".T.vcf > \"$TUMOR_FIXED\".T.vcf.pass;"
#        "java -Xmx8G -jar snpEff.jar eff -a 13 -c ~/snpEff-3.5/snpEff.config \ "
#        "   -noStats -hgvs -canon -o txt -v hg19 \"$TUMOR_FIXED\".T.vcf.pass \ "
#        "   |perl ~/programs/snpEff-3.2/scripts/vcfEffOnePerLine.pl  > \"$TUMOR_FIXED\".T.vcf.neo.ann "
#
#rule snpeff_strelka:
#    input:
#         tumor = FILE + 'strelka/{sample}.T/results/passed.somatic.snvs.vcf', file = FILE
#    output:
#         FILE + 'strelka/{sample}.T/results/passed.somatic.snvs.vcf.neo.ann'
#    threads: 1
#    params:
#         walltime="08:00", mem="8", name="sn.snpeff.strelka", threads="1"
#    shell:
#        "TUMOR={input.tumor}; "
#        "TUMOR_FIXED=${{TUMOR#$\"{input.file}strelka/\"}}; "
#        "TUMOR_FIXED=${{TUMOR_FIXED%$\".T/results/passed.somatic.snvs.vcf\"}}; "
#        "cd {input.file}strelka/\"$TUMOR_FIXED\".T/results/; "
#        "for file in *.vcf; do \ "
#        "    file=${{file%$\".vcf\"}} "
#        "    java -Xmx8G -jar snpEff.jar -a 13 -c snpEff-3.5/snpEff.config \ "
#        "        -stats \"$TUMOR_FIXED\".T.\"$file\".summary.html -hgvs -canon -o txt -v GRCh37.75 \"$file\".vcf \ "
#        "     |perl ~/programs/snpEff-3.5/scripts/vcfEffOnePerLine.pl > \"$file\".vcf.neo.ann;  "
#        "done "
#
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
