# Levi Mangarin 2018 Wolchok Lab
# lvmp mut_2c Snakefile_prepro
## Analysis pipeline for preprocessing fastq files, calibrated for GRCh37 analysis

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE

print(SAMPLE)
print(RID)
################################################################################
# Generate list of samples given RID

SAMPLEWITHRG=[]

for s, r in zip(SAMPLE, RID):
    r=int(r[-1:])
    rg=list(range(r+1))
    rg.pop(0)
    for i in rg:
        out = s + "." + "L" + str(i)
        SAMPLEWITHRG.append(out)

print(SAMPLEWITHRG)

def RGfromS (sid, srg):
    rg=[i.split('.', 2)[2] for i in srg]
    print(rg)
    s1=[i.split('.', 2)[0] for i in srg]
    s2=[i.split('.', 2)[1] for i in srg]
    s=['.'.join((first,second)) for first, second in zip(s1, s2)]

    print(s)

    rid=[]
    for i in range(0,len(srg)):
        if s[i] == sid:
            rid.append(rg[i])
    print(rid)
    return rid

SAMPLENOTN=[s.replace('.T', '') for s in sample]
SAMPLENOTN=[s.replace('.N', '') for s in SAMPLENOTN]
################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

REF = os.path.join(REFS + "human_g1k_v37_decoy.fasta")
DBSNP138 = os.path.join(REFS + "dbsnp_138.b37.vcf")
COSMIC = os.path.join(REFS + "CosmicCodingMuts_v86.vcf")
GOLD_INDELS = os.path.join(REFS + "Mills_and_1000G_gold_standard.indels.b37.vcf")
P1000G= os.path.join(REFS + "1000G_phase1.indels.b37.vcf")
INTERVALS= os.path.join(REFS + "Broad.human.exome.b37.interval_list")
REGION_b37="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT".split()
region=REGION_b37

# Containers
CONTAINERS=config["containers"]
SNPEFF=os.path.join(CONTAINERS + "snpeff-4.3t.simg")
NETMHC=os.path.join(CONTAINERS + "nm-1.1.simg")

################################################################################
rule all:
    input: 
        expand(FILE + 'bqsr/{SAMPLE}.pp.bam', SAMPLE = sample), 
        #expand(FILE + 'sort/{SAMPLE}.sort.bam', SAMPLE = SAMPLEWITHRG),
        expand(FILE + 'strelka/{SAMPLE}.T/results/passed.somatic.snvs.vcf', SAMPLE = SAMPLENOTN) ,
        expand(FILE + 'muTect/{SAMPLE}.T.vcf', SAMPLE = SAMPLENOTN),
        expand(FILE + 'vcf/{SAMPLE}.ann.vcf', SAMPLE = SAMPLENOTN)

#################################################################################
rule filter:
    input:
        vcf = FILE + 'vcf/{sample}.vcf', file = FILE, scripts=SCRIPTS, snpeff=SNPEFF
    output:
        vcf = FILE + 'vcf/{sample}.ann.vcf', fastaprot = FILE + 'vcf/{sample}.ann.fasta'
    params:
        walltime="24:00", mem="32", name="sn.filter", threads="1"
    shell:
        "module add singularity; "
        "SAMPLE={input.bam_tumor}; "
        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.snpeff} "
        " java -jar -Xmx{params.mem}G /snpEff/snpEff.jar ann "
        " -noStats "
        " -strict "
        " -no-downstream "
        " -no-intergenic "
        " -no-intron "
        " -no-upstream "
        " -no-utr "
        " -hgvs1LetterAa "
        " -hgvs "
        " -canon "
        " -v "
        " -onlyProtein "
        " -fastaProt {output.fastaprot} "
        " GRCh37.75 "
        " {input.vcf} > {output} "

rule neo_prepro:
    input:
        vcf = FILE + 'vcf/{sample}.ann.vcf', fastaprot = FILE + 'vcf/{sample}.ann.fasta', file = FILE, scripts=SCRIPTS, snpeff=SNPEFF
    output:
        
    params:
        walltime="24:00", mem="32", name="sn.filter", threads="1"
    shell:
        "module add singularity; "
        "SAMPLE={input.bam_tumor}; "
        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.snpeff} "
        " python gather_peptides.py {input.fastaprot} {output}; "

rule neo:
    input:
        vcf = FILE + 'vcf/{sample}.ann.vcf', fastaprot = FILE + 'vcf/{sample}.ann.fasta', snpeff=SNPEFF, file = FILE, scripts=SCRIPTS
    output:
        
    params:
        walltime="24:00", mem="32", name="sn.filter", threads="1"
    shell:
        "module add singularity; "
        "SAMPLE={input.bam_tumor}; "
        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.nm} "
        " python netmhc_calcs.py {input.fastaprot} {output}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.nm} "
        " python make_files.py {input.fastaprot} {output}; "


