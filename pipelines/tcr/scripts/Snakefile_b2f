#levi mangarin wolchok lab 2019
# lvmp b2f Snakefile_b2f

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
print(SAMPLE)
print(RID)
################################################################################
# Generate list of samples given RID

SAMPLEWITHRG=[]

for s, r in zip(SAMPLE, RID):
    r=int(r[-1:])
    rg=list(range(r+1))
    rg.pop(0)
    for i in rg:
        out = s + "." + "L" + str(i)
        SAMPLEWITHRG.append(out)

print(SAMPLEWITHRG)

def RGfromS (sid, srg):
    rg=[i.split('.', 2)[2] for i in srg]
    print(rg)
    s1=[i.split('.', 2)[0] for i in srg]
    s2=[i.split('.', 2)[1] for i in srg]
    s=['.'.join((first,second)) for first, second in zip(s1, s2)]

    print(s)

    rid=[]
    for i in range(0,len(srg)):
        if s[i] == sid:
            rid.append(rg[i])
    print(rid)
    return rid

SAMPLENOTN=[s.replace('.T', '') for s in sample]
SAMPLENOTN=[s.replace('.N', '') for s in SAMPLENOTN]
################################################################################
# References

FILE=config["file"]
REFS=config["refs"]
SCRIPTS=config["scripts"]

## refs for using grch37 hg19 (human)
REFK = os.path.join(REFS + "Mus_musculus.GRCm38.cdna.all.idx")
WHITELIST = os.path.join(REFS + "10xv2_whitelist.txt")
T2G = os.path.join(REFS + "mm10_t2g.txt")

# Containers
CONTAINERS=config["containers"]
CELLRANGER=os.path.join(CONTAINERS + "cellranger-3.1.0.simg")
MIXCR=os.path.join(CONTAINERS + "mixcr-3.0.9.simg")
VDJTOOLS=os.path.join(CONTAINERS + "vdjtools-1.2.1.simg")
PICARD=os.path.join(CONTAINERS + "picard-2.11.simg")

################################################################################
rule all:
    input: 
        expand(FILE + "fastq/{SAMPLE}.01.fastq",  SAMPLE = sample),
        expand(FILE + "fastq/{SAMPLE}.02.fastq",  SAMPLE = sample)

################################################################################

rule bamtofastq:
    input:
        bam=FILE + 'bam/{sample}.bam', file=FILE, picard=PICARD, refs=REFS, tmp= FILE + 'tmp/', outputdir = FILE + 'fastq/'
    output:
        L1 = FILE + 'fastq/{sample}.01.fastq', L2 = FILE + 'fastq/{sample}.02.fastq'

    params:
        walltime="64:00", mem="16", name="sn.b2f", threads="1"
    shell:
        "module add singularity; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
        "java -jar -Xmx{params.mem}g /picard-2.11/picard.jar "
        "RevertSam "
        "I={input.bam} "
        "O={input.bam}.reverted  "
        "SANITIZE=true "
        "VALIDATION_STRINGENCY=SILENT "
        "MAX_DISCARD_FRACTION=100 "
        "TMP_DIR={input.tmp}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
        "java -jar -Xmx{params.mem}g /picard-2.11/picard.jar "
        "SamToFastq "
        "I={input.bam}.reverted "
        "OUTPUT_PER_RG=true "
        "OUTPUT_DIR={input.outputdir} "
        "VALIDATION_STRINGENCY=SILENT "
        "TMP_DIR={input.tmp}; "
        "rm {input.bam}.reverted; "
