#levi mangarin wolchok lab 2016
# lvmp hla specific to downloading files from SRA
# first generate all fastq files, then optitype

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

REF = os.path.join(REFS + "human_g1k_b37.fasta")
INTERVALS= os.path.join(REFS + "human.exome.b37.interval_list")

OPTITYPE_REF= os.path.join(REFS + "optitype_hla_reference_dna.fasta")

# Containers
CONTAINERS=config["containers"]
PREPRO=os.path.join(CONTAINERS + "dsprepro-1.1.simg")
OPTITYPE=os.path.join(CONTAINERS + "optitype-writable.simg")
DBSNP138 = os.path.join(REFS + "dbsnp_138.b37.vcf")
PICARD=os.path.join(CONTAINERS + "picard-latest.simg")
SAMTOOLS=os.path.join(CONTAINERS + "samtools-1.6.simg")
#OPTITYPE=os.path.join(CONTAINERS + "optitype-release-v1.3.1.simg")

SAMPLETABLE=os.path.join(FILE + "sampletable_compass.csv")

################################################################################
rule all:
    #input: expand(FILE + "optitype/{SAMPLE}.hla", SAMPLE = sample),
    #input: expand(FILE + "sam/{SAMPLE}.T.sam", SAMPLE = sample)
            #expand(FILE + "sam/{SAMPLE}.N.sam", SAMPLE = sample)
    input: expand(FILE + "facets/{SAMPLE}_facets_output.txt", SAMPLE = sample),
        expand(FILE + "sam/{SAMPLE}.T.sam.done", SAMPLE = sample)

################################################################################
#rule dl_sam_normal:
#    input:
#        file=FILE, prepro=PREPRO,sampletable=SAMPLETABLE
#    output:
#        normal=FILE + 'sam/{sample}.N.sam'
#    params:
#        walltime="24:00", mem="16", name="sn.sra", threads="1", SID='{sample}'
#    shell:
#        "i={params.SID}; "
#        "SAMPLE=\"$(grep $i {input.sampletable} | head -n 1 | cut -d\',\' -f 2)\"; "
#        "echo $SAMPLE; "
#        "cd /data/wolchok/PROJECT/compass_hla/sam; "
#        "{input.file}../compass_hla/PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/sam-dump.2.9.2 $SAMPLE > {output}; "
#
#rule dl_sam_tumor:
#    input:
#        file=FILE, prepro=PREPRO, sampletable=SAMPLETABLE
#    output:
#        tumor=FILE + 'sam/{sample}.T.sam'
#    params:
#        walltime="24:00", mem="16", name="sn.sra", threads="1", SID='{sample}'
#    shell:
#        "i={params.SID}; "
#        "SAMPLE=\"$(grep $i {input.sampletable} | head -n 1 | cut -d\',\' -f 3)\"; "
#        "echo $SAMPLE; "
#        "cd /data/wolchok/PROJECT/compass_hla/sam; "
#        "set -x; "
#        "{input.file}../compass_hla/PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/sam-dump.2.9.2 $SAMPLE > {output}; "
#
#rule samtobam:
#    input: sam=FILE + 'sam/{sample}.sam', file=FILE, prepro=PREPRO, samtools=SAMTOOLS, refs=REFS
#    output: temp(FILE + 'bam/{sample}.bam')
#    params:
#        walltime="8:00", mem="16", name="sn.s2b", threads="1"
#    shell:
#        "module add singularity; "
#        "singularity exec --bind {input.refs}:{input.refs} --bind {input.file}:{input.file} {input.samtools} "
#        "samtools view -bh {input.sam} > {output}; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.samtools} "
#        "samtools index {output} "

#rule sort:
#    input:
#         bam=FILE + 'bam/{sample}.bam', file=FILE, prepro=PREPRO, samtools=SAMTOOLS, refs=REFS #skip merge step if only one lane 
#    output:
#         FILE + 'sort/{sample}.sort.bam'
#    params:
#        walltime="24:00", mem="32", name="sn.sort", threads="1"
#    shell:
#        "module add singularity; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.samtools} "
#        "samtools sort -O bam {input.bam} -o {output};"

rule snp_pileup:
    input:
         normal = FILE + 'bam/{sample}.N.bam',
         tumor = FILE + 'bam/{sample}.T.bam', 
         refs=REFS, file=FILE, scripts=SCRIPTS, dbsnp=DBSNP138, outpath= FILE + 'facets/'
    output:
         snp = FILE + 'facets/{sample}.csv.gz',
         cnv = FILE + 'facets/{sample}_facets_output.txt'
    params:
        walltime="16:00", mem="36", name="sn.pileup", threads="1"
    shell:
        "module add singularity; "
        "module add R; "
        "/home/mangaril/programs/snp-pileup/htstools/snp-pileup "
        "--gzip -q15 -Q20 -P100 -r25,0 "
        "{input.dbsnp} "
        "{output.snp} "
        "{input.normal} "
        "{input.tumor} ;"
        "TUMOR={input.normal};  "
        "TUMOR_FIXED=${{TUMOR%%.*}}; "
        "TUMOR_FIXED=${{TUMOR_FIXED##*/}}; "
        "Rscript /home/mangaril/lvmp/lvmp/pipelines/hla/scripts/run_facets.R "
        " $TUMOR_FIXED "
        "{output.snp} "
        "{input.outpath} "
        "{output.cnv} ;"


rule gzip_bam:
    input:
        file=FILE, prepro=PREPRO,
        L1=FILE + 'bam/{sample}.T.bam',
        L2=FILE + 'bam/{sample}.N.bam',
        cnv = FILE + 'facets/{sample}_facets_output.txt'
    output:
        L1=temp(FILE + 'bam/{sample}.T.bam.gz'),
        L2=temp(FILE + 'bam/{sample}.N.bam.gz')
    params:
        walltime="12:00", mem="8", name="sn.gzip_fastq", threads="1", SID='{sample}'
    shell:
        "gzip < {input.L1} > {output.L1}; "
        "gzip < {input.L2} > {output.L2}; "

rule awsup:
    input:
        file=FILE, prepro=PREPRO,
        L1=FILE + 'bam/{sample}.T.bam.gz',
        L2=FILE + 'bam/{sample}.N.bam.gz',
        fL1=FILE + 'bam/{sample}.T.bam',
        fL2=FILE + 'bam/{sample}.N.bam'
    output:
        L1=FILE + 'sam/{sample}.T.sam.done',
        L2=FILE + 'sam/{sample}.N.sam.done'
    params:
        walltime="12:00", mem="8", name="sn.awsup", threads="1", SID='{sample}'
    shell:
        "~/aws/miniconda3/bin/aws s3 cp {input.L1} \"s3://immunoseqexternal/Collab_BG/COMPASS/WES/{input.L1}\" > {output.L1}; "
        "~/aws/miniconda3/bin/aws s3 cp {input.L2} \"s3://immunoseqexternal/Collab_BG/COMPASS/WES/{input.L2}\" > {output.L2}; "
        "rm {input.L1}; "
        "rm {input.L2}; "
        "rm {input.fL1}; "
        "rm {input.fL2}; "


################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
#rule dl_sam:
#    input:
#        file=FILE, prepro=PREPRO
#    output:
#        sam=FILE + 'sam/{sample}.sam',
#    params:
#        walltime="4:00", mem="4", name="sn.sra", threads="1", SID='{sample}'
#    shell:
#        "cd {input.file}sam; "
#        "{input.file}PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/sam-dump.2.9.2 "
#        "-s {params.SID} "
#        "> {output} "
#        #"--aligned-region 6 "
#        #"{input.file}PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/vdb-config --import {input.file}compass/prj_16485.ngc . ; "
#rule bamtofastq:
#    input:
#        bam=FILE + 'sam/{sample}.sam', file=FILE, prepro=PREPRO, refs=REFS, picard=PICARD, tmp= FILE + 'tmp/'
#    output:
#        L1 = FILE + 'fastq/{sample}.01.fastq',
#        L2 = FILE + 'fastq/{sample}.02.fastq'
#    params:
#        walltime="12:00", mem="24", name="sn.b2f", threads="1"
#    shell:
#        "module add singularity; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools view -bS {input.bam} -o {input.bam}.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools bam2fq {input.bam}.bam > {input.bam}.fastq;"
#        "cat {input.bam}.fastq | grep \'^\@.\*/1$\' -A 3 --no-group-separator > {output.L1}; "
#        "cat {input.bam}.fastq | grep \'^\@.\*/2$\' -A 3 --no-group-separator > {output.L2}; "
#        "rm {input.bam}.bam; "
#        #"rm {input.bam}.fastq; "
        
        #currently using
        #"SAMPLE={input.L1};  "
        #"SAMPLE=${{SAMPLE%%.*}}; "
        #"SAMPLE=${{SAMPLE##*/}}; "
        #"singularity exec --bind {input.file}:{input.file} {input.optitype} "
        #"python /usr/local/bin/OptiType/OptiTypePipeline.py "
        #"   --input {input.L1} {input.L2} "
        #"   --dna "
        #"   --verbose "
        #"   --outdir {input.outdir}/\"$SAMPLE\"; "
        #"cd {input.outdir}/\"$SAMPLE\"; "
        #"cp \"$(find -name \"\*result\*\" | head -n 1 )\" {output.hla}; "
        #"{input.scripts}/optitype_format -i {output.hla} -o {output.hla}.hla; "
        #"gzip {input.L1}; "

        #"singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
        #"java -jar -Xmx{params.mem}g /usr/picard/picard.jar "
        #"RevertSam "
        #"I={input.bam}.bam "
        #"O={input.bam}.reverted  "
        #"SANITIZE=true "
        #"VALIDATION_STRINGENCY=SILENT "
        #"MAX_DISCARD_FRACTION=100 "
        #"TMP_DIR={input.tmp}; "
        #"java -Xmx{params.mem}G -jar /usr/picard/picard.jar SamToFastq "
        #"I={input.bam}.reverted "
        #"VALIDATION_STRINGENCY=SILENT "
        #"FASTQ={output.L1}  "
        #"SECOND_END_FASTQ={output.L2}  ;"
        #"rm {input.bam}.reverted; "
        #"rm {input.bam}.bam; "

        #"singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        #"samtools view -H {input.bam} | sort -u  {input.bam} > {input.bam}.txt; "
        #"singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        #"samtools reheader {input.bam}.txt {input.bam} > {input.bam}.header; "
#
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
#        "java -jar -Xmx{params.mem}g /picard-2.11/picard.jar "
#        "SamToFastq "
#        "I={input.bam}.reverted "
#        "OUTPUT_PER_RG=true "
#        "OUTPUT_DIR={input.outputdir} "
#        "VALIDATION_STRINGENCY=SILENT "
#        "TMP_DIR={input.tmp}; "
#        "rm {input.bam}.reverted; "

#        "module add singularity; "
#        "cd {input.file}; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools view -H {input.bam} | sort -u  {input.bam} > {input.bam}.txt; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools reheader {input.bam}.txt {input.bam} > {input.bam}.header; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools view -bS {input.bam}.header -o {input.bam}.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools index {input.bam}.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.picard} "
#        "java -Xmx{params.mem}G -jar /usr/picard/picard.jar SamToFastq "
#        "I={input.bam}.bam  "
#        "VALIDATION_STRINGENCY=LENIENT "
#        "FASTQ={output.L1}  "
#        "SECOND_END_FASTQ={output.L2}  ;"
#        "rm {input.bam}.header; "
#        "rm {input.bam}.txt; "
#        "rm {input.bam}.bam; "




#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools view -bS {input.bam} -o {input.bam}.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools sort -O bam {input.bam}.bam -o {input.bam}.sort.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "samtools index {input.bam}.sort.bam; "
#        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
#        "/bedtools2/bin/bedtools bamtofastq -i {input.bam}.sort.bam -fq {output.L1} -fq2 {output.L2}; "
#        "rm {input.bam}.bam; "
#        "rm {input.bam}.sort.bam; "

#rule optitype:
#    input:
#         L1 = FILE + 'fastq/{sample}_1.fastq', L2 = FILE + 'fastq/{sample}_2.fastq', outdir=FILE + 'optitype', file=FILE, optitype=OPTITYPE, scripts=SCRIPTS
#         #L1 = FILE + 'fastq/{sample}.01.fastq', L2 = FILE + 'fastq/{sample}.02.fastq', outdir=FILE + 'optitype', file=FILE, optitype=OPTITYPE
#    output:
#         hla = FILE + 'optitype/{sample}.tsv', L1 = FILE + 'fastq/{sample}_1.fastq.gz', L2 = FILE + 'fastq/{sample}_2.fastq.gz'
#    params:
#        walltime="16:00", mem="16", name="sn.opti", threads="1"
#    shell:
#        "module add singularity; "
#        "SAMPLE={input.L1};  "
#        "SAMPLE=${{SAMPLE%%.*}}; "
#        "SAMPLE=${{SAMPLE##*/}}; "
#        "singularity exec --bind {input.file}:{input.file} {input.optitype} "
#        "python /usr/local/bin/OptiType/OptiTypePipeline.py "
#        "   --input {input.L1} {input.L2} "
#        "   --dna "
#        "   --verbose "
#        "   --outdir {input.outdir}/\"$SAMPLE\"; "
#        "cd {input.outdir}/\"$SAMPLE\"; "
#        "cp \"$(find -name \"\*result\*\" | head -n 1 )\" {output.hla}; "
#        "{input.scripts}/optitype_format -i {output.hla} -o {output.hla}.hla; "
#        "gzip {input.L1}; "
#        "gzip {input.L2}; "

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
#rule dl_sam_normal:
#    input:
#        file=FILE, prepro=PREPRO
#    output:
#        normal=FILE + 'sam/{sample}.N.sam'
#    params:
#        walltime="24:00", mem="8", name="sn.sra", threads="1", SID='{sample}'
#    shell:
#        "i={params.SID}; "
#        "set -x; "
#        "awk -F\\\",\\\" \" {{if ((\\$24 ==\\\"$i\\\") && (\\$19 == \\\"Peripheral Blood\\\") && (\\$1 == \\\"WXS\\\")) {{print \\$14}}  }} \" Lesokhin_Sra_Information.csv > {output}.sample; "
#        "SAMPLE=\"$(cat {output}.sample)\"; "
#        "echo $SAMPLE; "
##        "cd {input.file}../compass_hla/sam; "
##        "{input.file}../compass_hla/PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/sam-dump.2.9.2 "
##        " $SAMPLE "
##        "> {output} "
#
#rule dl_sam_tumor:
#    input:
#        file=FILE, prepro=PREPRO
#    output:
#        tumor=FILE + 'sam/{sample}.T.sam'
#    params:
#        walltime="24:00", mem="8", name="sn.sra", threads="1", SID='{sample}'
#    shell:
#        "set -x; "
#        "i={params.SID}; "
#        #"echo \"awk -F \",\" \" {{if ((\\$24 ==\\\"$i\\\") && (\\$19 == \\\"Bone Marrow\\\") && (\\$1 == \\\"WXS\\\")) {{print \\$14}} }} \" Lesokhin_Sra_Information.csv)\"; "
#        #"echo $SAMPLE; "
##        "cd {input.file}../compass_hla/sam; "
##        "{input.file}../compass_hla/PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/sam-dump.2.9.2 "
##        #" $SAMPLE "
##        "> {output} "{
##        #"SAMPLE=\"$(awk -F \",\" \" {{if ((\\$24 ==\\\"$i\\\") && (\\$19 == \\\"Bone Marrow\\\") && (\\$1 == \\\"WXS\\\")) {{print \\$14}} }} \" Lesokhin_Sra_Information.csv)\"; "
