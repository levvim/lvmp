#levi mangarin wolchok lab 2016
# lvmp hla specific to downloading files from SRA
# first generate all fastq files, then optitype

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

REF = os.path.join(REFS + "human_g1k_b37.fasta")
INTERVALS= os.path.join(REFS + "human.exome.b37.interval_list")

OPTITYPE_REF= os.path.join(REFS + "optitype_hla_reference_dna.fasta")

# Containers
CONTAINERS=config["containers"]
PREPRO=os.path.join(CONTAINERS + "dsprepro-1.1.simg")
OPTITYPE=os.path.join(CONTAINERS + "optitype-writable.simg")
PICARD=os.path.join(CONTAINERS + "picard-latest.simg")
#OPTITYPE=os.path.join(CONTAINERS + "optitype-release-v1.3.1.simg")

################################################################################
rule all:
    #input: expand(FILE + "optitype/{SAMPLE}.hla", SAMPLE = sample),
    input: expand(FILE + "fastq/{SAMPLE}_1.fastq.gz.done", SAMPLE = sample)

################################################################################
rule dl_fastq:
    input:
        file=FILE, prepro=PREPRO
    output:
        L1 = FILE + 'fastq/{sample}_1.fastq',
        L2 = FILE + 'fastq/{sample}_2.fastq'
    params:
        walltime="24:00", mem="16", name="sn.sra", threads="1", SID='{sample}'
    shell:
        "cd {input.file}/sam; "
        "{input.file}PROGRAMS/sratoolkit.2.9.2-centos_linux64/bin/fasterq-dump.2.9.2 "
        "--split-files "
        "{params.SID} "
        "-O ../fastq/; "

rule optitype:
    input:
         L1 = FILE + 'fastq/{sample}_1.fastq',
         L2 = FILE + 'fastq/{sample}_2.fastq', 
         outdir=FILE + 'optitype', file=FILE, optitype=OPTITYPE, scripts=SCRIPTS
    output:
         hla = FILE + 'optitype/{sample}.hla'
    params:
        walltime="16:00", mem="64", name="sn.opti", threads="1"
    shell:
        "module add singularity; "
        "i={input.L1}; ifix=${i%_*}; ifix=${ifix##*/}; "
        "cd {input.file}; "
        "singularity exec --bind {input.file}:{input.file} {input.optitype} "
        "    python /usr/local/bin/OptiType/OptiTypePipeline.py "
        "            --input {input.L1} {input.L2} "
        "            --dna "
        "            --verbose "
        "            --outdir $FILE/optitype/\"$ifix\" ;"
        "cd {input.file}/optitype/\"$ifix\"; "
        "cp \"$(find -name \"*result*\" | head -n 1 )\" {input.file}/optitype/\"$ifix\".tsv ; "
        "cd {input.file}/optitype/; "
        "{input.scripts}/optitype_format -i {input.file}/optitype/\"$ifix\".tsv -o {output.hla};"


rule gzip_fastq:
    input:
        file=FILE, prepro=PREPRO,
        L1=temp(FILE + 'fastq/{sample}_1.fastq'),
        L2=temp(FILE + 'fastq/{sample}_2.fastq'),
        hla = FILE + 'optitype/{sample}.hla'
    output:
        L1=FILE + 'fastq/{sample}_1.fastq.gz',
        L2=FILE + 'fastq/{sample}_2.fastq.gz'
    params:
        walltime="12:00", mem="8", name="sn.gzip_fastq", threads="1", SID='{sample}'
    shell:
        "gzip < {input.L1} > {output.L1}; "
        "gzip < {input.L2} > {output.L2}; "

rule awsup:
    input:
        file=FILE, prepro=PREPRO,
        L1=temp(FILE + 'fastq/{sample}_1.fastq.gz'),
        L2=temp(FILE + 'fastq/{sample}_2.fastq.gz'),
        fL1=temp(FILE + 'fastq/{sample}_1.fastq'),
        fL2=temp(FILE + 'fastq/{sample}_2.fastq')
    output:
        L1=FILE + 'fastq/{sample}_1.fastq.gz.done',
        L2=FILE + 'fastq/{sample}_2.fastq.gz.done'
    params:
        walltime="12:00", mem="8", name="sn.awsup", threads="1", SID='{sample}'
    shell:
        "~/aws/miniconda3/bin/aws s3 cp {input.L1} \"s3://immunoseqexternal/Collab_BG/COMPASS/WES/{input.L1}\" > {output.L1}; "
        "~/aws/miniconda3/bin/aws s3 cp {input.L2} \"s3://immunoseqexternal/Collab_BG/COMPASS/WES/{input.L2}\" > {output.L2}; "
        "rm {input.L1}; "
        "rm {input.L2}; "
        "rm {input.fL1}; "
        "rm {input.fL2}; "

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
