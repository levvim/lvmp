#levi mangarin wolchok lab 2016
# lvmp hla

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

REF = os.path.join(REFS + "human_g1k_b37.fasta")
INTERVALS= os.path.join(REFS + "human.exome.b37.interval_list")

OPTITYPE_REF= os.path.join(REFS + "optitype_hla_reference_dna.fasta")

# Containers
CONTAINERS=config["containers"]
PREPRO=os.path.join(CONTAINERS + "dsprepro-1.1.simg")
OPTITYPE=os.path.join(CONTAINERS + "optitype-release-v1.3.1.simg")

################################################################################
rule all:
    input: expand(FILE + "optitype/{SAMPLE}/{SAMPLE}.tsv", SAMPLE = sample)

################################################################################
rule dl_sam:
    input:
        file=FILE, prepro=PREPRO
    output:
        sam=temp(FILE + 'sam/{sample}.sam'),
    params:
        walltime="24:00", mem="4", name="sn.sra", threads="1", SID='{sample}'
    shell:
        "module add singularity; "
        "cd {input.file}/sam; "
        "/data/wolchok/david/PROGRAMS/sratoolkit.2.9.0-centos_linux64/bin/vdb-config --import /data/wolchok/david/compass/prj_16485.ngc . ; "
        "/data/wolchok/david/PROGRAMS/sratoolkit.2.9.0-centos_linux64/bin/sam-dump.2.9.0 -s {params.SID} "
        "--aligned-region 6:28510120-33480577 "
        "> {output} "

rule bamtofastq:
    input:
        bam=FILE + 'sam/{sample}.sam', file=FILE, prepro=PREPRO, refs=REFS
    output:
        L1 = FILE + 'fastq/{sample}.fastq'
    params:
        walltime="24:00", mem="48", name="sn.b2f", threads="1"
    shell:
        "module add singularity; "
        "cd {input.file}; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        "samtools view -bS {input.bam} -o {input.bam}.bam; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        "samtools sort -O bam {input.bam}.bam -o {input.bam}.sort.bam; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        "samtools index {input.bam}.sort.bam; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.prepro} "
        "/bedtools2/bin/bedtools bamtofastq -i {input.bam}.sort.bam -fq {output.L1}; "
        "rm {input.bam}.bam; "
        "rm {input.bam}.sort.bam; "

rule optitype:
    input:
         L1 = FILE + 'fastq/{sample}.fastq', outdir=FILE + "optitype/", file=FILE, optitype=OPTITYPE
    output:
         FILE + 'optitype/{sample}/{sample}.tsv'
    params:
        walltime="24:00", mem="32", name="sn.opti", threads="1"
    shell:
        "module add singularity; "
        "SAMPLE={input.L1};  "
        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
        "singularity exec --bind {input.file}:{input.file} {input.optitype} "
        "python /usr/local/bin/OptiType/OptiTypePipeline.py --input {input.L1} --dna -v --outdir {input.outdir}/\"$SAMPLE\";"
        "rm {input.L1}; "
        "touch {output};"

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
