#levi mangarin wolchok lab 2016
# lvmp hla: class I typing from fastq

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
################################################################################
# References

FILE=config["file"]

# refs for using grch37 b37 (broad)
REFS=config["refs"]
SCRIPTS=config["scripts"]

REF = os.path.join(REFS + "human_g1k_b37.fasta")
INTERVALS= os.path.join(REFS + "human.exome.b37.interval_list")

OPTITYPE_REF= os.path.join(REFS + "optitype_hla_reference_dna.fasta")

# Containers
CONTAINERS=config["containers"]
PREPRO=os.path.join(CONTAINERS + "dsprepro-1.1.simg")
#OPTITYPE=os.path.join(CONTAINERS + "optitype-release-v1.3.1.simg")
OPTITYPE=os.path.join(CONTAINERS + "optitype-writable.simg")

################################################################################
rule all:
    input: expand(FILE + "optitype/{SAMPLE}/{SAMPLE}.tsv", SAMPLE = sample)
    #input: expand(FILE + "fastq/{SAMPLE}.cat.01.fastq", SAMPLE = sample)

################################################################################
rule gunzip:
    input: 
        fastq1=FILE + 'fastq/{sample}.01.fastq.gz', 
        fastq2=FILE + 'fastq/{sample}.02.fastq.gz'
    output: 
        fastq1=FILE + 'fastq/{sample}.01.fastq', 
        fastq2=FILE + 'fastq/{sample}.02.fastq'
    params:
        walltime="16:00", mem="4", name="sn.gz", threads="1"
    shell:
        "gunzip {input.fastq1};"
        "gunzip {input.fastq2};"

rule merge_fastq:
    input:
        bamwrg1 = lambda w: list(set(expand(FILE + 'fastq/{sample}.{RUN}.01.fastq', sample=w.sample, RUN=RGfromS(w.sample, SAMPLEWITHRG)))),
        bamwrg2 = lambda w: list(set(expand(FILE + 'fastq/{sample}.{RUN}.02.fastq', sample=w.sample, RUN=RGfromS(w.sample, SAMPLEWITHRG)))),
        tmpdir = FILE + "tmp/", file=FILE
    output:
        output1 = FILE + 'fastq/{sample}.merge.01.fastq',
        output2 = FILE + 'fastq/{sample}.merge.02.fastq'
    params:
        walltime="12:00", mem="16", name="sn.merge", threads="1"
    message: "executing {input.bamwrg1}"
    run:
        inputstr1 = " ".join([" {} ".format(x) for x in input.bamwrg1])
        inputstr2 = " ".join([" {} ".format(x) for x in input.bamwrg2])
        shell("cat {inputstr1} > {output.output1}")
        shell("cat {inputstr2} > {output.output2}")

rule optitype:
    input:
         L1 = FILE + 'fastq/{sample}.merge.01.fastq', L2=FILE + 'fastq/{sample}.merge.02.fastq', outdir=FILE + "optitype/", file=FILE, prepro=PREPRO, optitype=OPTITYPE, scripts=SCRIPTS
         #L1 = FILE + 'fastq/{sample}.01.fastq', L2=FILE + 'fastq/{sample}.02.fastq', outdir=FILE + "optitype/", file=FILE, prepro=PREPRO, optitype=OPTITYPE, scripts=SCRIPTS
    output:
         FILE + 'optitype/{sample}/{sample}.tsv'
    params:
        walltime="24:00", mem="48", name="sn.opti", threads="1"
    shell:
        "module add singularity; "
        "SAMPLE={input.L1};  "
        "SAMPLE=${{SAMPLE%%.*}}; "
        "SAMPLE=${{SAMPLE##*/}}; "
        "singularity exec --bind {input.file}:{input.file} {input.optitype} "
        "python /usr/local/bin/OptiType/OptiTypePipeline.py --input {input.L1} {input.L2} --dna --verbose --outdir {input.outdir}/\"$SAMPLE\"; "
        "touch {output}; " 
        #"cd {input.outdir}/\"$SAMPLE\; "
        #"cp $(find -name \"*result*\" | head -n 1) {output}.optitype; "
        #"singularity exec --bind {input.file}:{input.file} {input.prepro} "
        #"{input.scripts}/optitype_format -i {output}.optitype -o {output}; "


################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
