#levi mangarin wolchok lab 2018
# lvmp ssc Snakefile_ssc analysis of barcode data

################################################################################
# Samples

if ' ' in str(config["samples"]):
    SAMPLE=config["samples"].split()
else:
    SAMPLE=config["samples"]

if ' ' in str(config["RID"]):
    RID=config["RID"].split()
else:
    RID=config["RID"]

sample=SAMPLE
print(SAMPLE)
print(RID)
################################################################################
# Generate list of samples given RID

SAMPLEWITHRG=[]

for s, r in zip(SAMPLE, RID):
    r=int(r[-1:])
    rg=list(range(r+1))
    rg.pop(0)
    for i in rg:
        out = s + "." + "L" + str(i)
        SAMPLEWITHRG.append(out)

print(SAMPLEWITHRG)

def RGfromS (sid, srg):
    rg=[i.split('.', 2)[2] for i in srg]
    print(rg)
    s1=[i.split('.', 2)[0] for i in srg]
    s2=[i.split('.', 2)[1] for i in srg]
    s=['.'.join((first,second)) for first, second in zip(s1, s2)]

    print(s)

    rid=[]
    for i in range(0,len(srg)):
        if s[i] == sid:
            rid.append(rg[i])
    print(rid)
    return rid

SAMPLENOTN=[s.replace('.T', '') for s in sample]
SAMPLENOTN=[s.replace('.N', '') for s in SAMPLENOTN]
################################################################################
# References

FILE=config["file"]
REFS=config["refs"]
SCRIPTS=config["scripts"]

## refs for using grch37 hg19 (human)
REFK = os.path.join(REFS + "Mus_musculus.GRCm38.cdna.all.idx")
WHITELIST = os.path.join(REFS + "10xv3_whitelist.txt")
T2G = os.path.join(REFS + "mm10_t2g.txt")

# Containers
CONTAINERS=config["containers"]
CELLRANGER=os.path.join(CONTAINERS + "cellranger-3.1.0.simg")
MIXCR=os.path.join(CONTAINERS + "mixcr-3.0.9.simg")
VDJTOOLS=os.path.join(CONTAINERS + "vdjtools-1.2.1.simg")

################################################################################
rule all:
    input:
        expand(FILE + "crbar/{SAMPLE}/outs/filtered_feature_bc_matrix/matrix.mtx.gz.out",  SAMPLE = sample)
        #expand(FILE + "crbar/{SAMPLE}/read_count/barcodes.tsv.gz",  SAMPLE = sample)

################################################################################

rule cr_count:
    input: sample = FILE + 'raw/{sample}/{sample}.txt', barcode = FILE + 'totalseq-c_cr.csv', file=FILE, refs=REFS, containers=CONTAINERS, cellranger=CELLRANGER
    output:
        FILE + "crbar/{sample}/outs/filtered_feature_bc_matrix/matrix.mtx.gz.out"
    params:
        walltime="24:00", mem="32", name="sn.crbar", threads="8"
    shell:
        "module add singularity; "
        "SAMPLE={input.sample}; "
        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
        "cd {input.file}/raw/; "
        "echo -e \"fastqs,sample,library_type\" > \"$SAMPLE_FIXED\".lib.txt; "
        "echo -e \"{input.file}raw/\"$SAMPLE_FIXED\",\"$SAMPLE_FIXED\",Gene Expression\" >> \"$SAMPLE_FIXED\".lib.txt; "
        "echo -e \"{input.file}raw/\"$SAMPLE_FIXED\"-B,\"$SAMPLE_FIXED\"-B,Antibody Capture\" >> \"$SAMPLE_FIXED\".lib.txt; "
        "rm -rf {input.file}/crbar/\"$SAMPLE_FIXED\"; "
        "cd {input.file}/crbar/; "
        "singularity exec --bind {input.file}:{input.file} --bind {input.refs}:{input.refs} {input.cellranger} "
        "   /cellranger-3.1.0/cellranger count "
        "   --id=\"$SAMPLE_FIXED\" "
        "   --transcriptome={input.refs}/refdata-cellranger-mm10-3.0.0 "
        "   --libraries {input.file}/raw/\"$SAMPLE_FIXED\".lib.txt"
        "   --feature-ref {input.barcode} "
        "   --chemistry SC5P-R2 "
        "   --expect-cells=1000 "
        "   --localcores={params.threads}; "
        "touch {output}"

#rule citeseq:
#    input:
#        fastq1 = FILE + 'raw/{sample}/{sample}.L1.01.fastq.gz',
#        fastq2 = FILE + 'raw/{sample}/{sample}.L1.02.fastq.gz',
#        tags = FILE + 'totalseq-c.csv',
#        file=FILE, refs=REFS, containers=CONTAINERS, whitelist=WHITELIST
#    output:
#        FILE + "crbar/{sample}/read_count/barcodes.tsv.gz"
#    params:
#        walltime="64:00", mem="32", name="sn.citeseqc", threads="4"
#    shell:
#        "SAMPLE={input.fastq1}; "
#        "SAMPLE_FIXED=${{SAMPLE%%.*}}; "
#        "SAMPLE_FIXED=${{SAMPLE_FIXED##*/}}; "
#        "cd {input.file}/crbar/; "
#        "mkdir -p {input.file}/crbar/\"$SAMPLE_FIXED\"; "
#        "~/programs/miniconda3/bin/CITE-seq-Count "
#        "   -R1 {input.fastq1} "
#        "   -R2 {input.fastq2} "
#        "   -t {input.tags} "
#        "   --whitelist {input.whitelist} "
#        "   -cbf 1 "
#        "   -cbl 16 "
#        "   -umif 17 "
#        "   -umil 26"
#        "   --start-trim 10 "
#        "   --sliding-window "
#        "   --expected_cells 10500 "
#        "   --threads {params.threads} "
#        "   -o {input.file}/crbar/\"$SAMPLE_FIXED\"; "
#        "touch {output}; "

################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
